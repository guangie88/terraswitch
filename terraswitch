#!/usr/bin/env bash
set -euo pipefail

function assert_exist {
    if ! which "$1" >/dev/null; then
        >&2 printf "This script needs \"%s\" to work!\n" "$1"
        exit 1
    fi
}

function print_usage {
    >&2 printf "Usage: %s (11|12)\nChoose either between Terraform version v0.11 or v0.12\n" "$(basename "$0")"
}

# Main

assert_exist curl
assert_exist unzip

# Check for arg count
if [ "$#" -ne 1 ]; then
    print_usage
    exit 1
fi

# Check for first arg validity
if [ "$1" = "0.11" ]; then
    TF_VERSION=0.11.14
    TG_VERSION=0.18.7
elif [ "$1" = "0.12" ]; then
    TF_VERSION=0.12.4
    TG_VERSION=0.19.8
else
    print_usage
    exit 1
fi

# Get OS
if [[ "${OSTYPE}" == "linux-gnu" ]]; then
    OS=linux
elif [[ "${OSTYPE}" == "darwin"* ]]; then
    OS=darwin
elif [[ "${OSTYPE}" == "cygwin" ]] || [[ "${OSTYPE}" == "msys" ]] || [[ "${OSTYPE}" == "win32" ]]; then
    OS=windows
else
    >&2 echo "Invalid OSTYPE ${OSTYPE}, aborting!"
    exit 1
fi

# Get ARCH
RAW_ARCH="$(uname -m)"
if [[ "${RAW_ARCH}" == "x86_64" ]]; then
    ARCH=amd64
elif [[ "${RAW_ARCH}" == "i*86" ]]; then
    ARCH=386
else
    >&2 echo "Invalid ARCH ${RAW_ARCH}, aborting!"
    exit 1
fi

# Terraform
if ! which terraform_${TF_VERSION} >/dev/null; then
    curl -LO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_${OS}_${ARCH}.zip
    unzip terraform_${TF_VERSION}_${OS}_${ARCH}.zip
    sudo mv terraform /usr/local/bin/terraform_${TF_VERSION}
    rm terraform_${TF_VERSION}_${OS}_${ARCH}.zip
fi
sudo cp "$(which terraform_${TF_VERSION})" /usr/local/bin/terraform

# Terragrunt
if ! which terragrunt_${TG_VERSION} >/dev/null; then
    curl -LO https://github.com/gruntwork-io/terragrunt/releases/download/v${TG_VERSION}/terragrunt_${OS}_${ARCH}
    chmod +x terragrunt_${OS}_${ARCH}
    sudo mv terragrunt_${OS}_${ARCH} /usr/local/bin/terragrunt_${TG_VERSION}
fi
sudo cp "$(which terragrunt_${TG_VERSION})" /usr/local/bin/terragrunt

echo "Switched to terraform v${TF_VERSION} and terragrunt v${TG_VERSION}!"
